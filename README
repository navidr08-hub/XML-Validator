Summarize your lab:

  Part 1:
     Works  Yes or No
	 Yes
     
  Part 2:
     Works  Yes or No
     Yes
  Part 3:
     Works  Yes or No
     No
***ANSWERS TO QUESTIONS***
 Question 1:
     Which hash table collision resolution method did you use
     (eg. chaining or open addressing)? Explain your choice
     briefly (less than 25 words).
 YOUR ANSWER: To resolve the hash table collisions I used open-addressing. In this case open-addressing would be less efficient as the hash table size is very large.
 
 
 
 
 
 Question 2:
       Which hash function (division or multiplication) did you use?
       How did you convert a string into a number?
 YOUR ANSWER: I used multiplication to convert the string to an integer. First I made a sum variable then I added the acii value of each character in the tag to the sum, then I multipied the sum by the acii value. I did this for each character in the loop. Then I got the remainder of the the sum value when dividing by the HASH_TABLE_SIZE, this was done using the modular operation. The resultant value is the hash value I used to store tags in the hash table.   

 
 
 
 Question 3:
       Another legal XML tag not used in this lab is the
       stand-alone tag.  This kind of tag
       combines both a start-tag and end-tag in one.
       It is identified with a '/' (slash) preceding the
       final >.  (For example, the <foo/>
       is a stand-alone tag that is self balancing.
       
       Describe briefly how
       you would modify Part 3 to allow this kind of tag.
       
 YOUR ANSWER: The only thing that would change is the way I would read the identity of the tag. So instead of checking for the '/' right after the '<'. I would tell the computer to stop reading the identity when the character being read is either '>' or '/'. If the loop that reads the characters terminates with a '/' then it is a stand-alone tag. If it ends with '>' then it is either an open tag or a close tag.

Taskin Rahman 												Section 09
500973553  													Thong.vo
